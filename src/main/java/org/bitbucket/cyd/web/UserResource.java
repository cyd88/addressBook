package org.bitbucket.cyd.web;import org.bitbucket.cyd.domain.User;import org.bitbucket.cyd.repository.UserRepository;import org.bitbucket.cyd.security.AuthorityConstant;import org.bitbucket.cyd.security.SecurityUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.annotation.Secured;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping(value = "/api")public class UserResource {    private static final Logger logger = LoggerFactory.getLogger(UserResource.class);    @Autowired    private UserRepository userRepository;    @Autowired    private PasswordEncoder passwordEncoder;    @RequestMapping(value="/users/register",method = RequestMethod.POST)    public User registerUser(@RequestBody User user){        if(userRepository.findByUsername(user.getUsername())== null){            user.setPassword(passwordEncoder.encode(user.getPassword()));            userRepository.save(user);            logger.info("Register new user");            return new User();        }        return new User();    }    @RequestMapping(value="/users/login",method = RequestMethod.GET)    public User login(){        String username = SecurityUtils.getCurrentLoginUser();        User user = userRepository.findByUsername(username);        return user;    }}